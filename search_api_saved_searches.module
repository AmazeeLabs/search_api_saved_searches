<?php

/**
 * @file
 * Offers the ability to save searches and be notified of new results.
 */

/**
 * Implements hook_menu().
 */
function search_api_saved_searches_menu() {
  $items['admin/config/search/search_api/index/%search_api_index/saved_searches'] = array(
    'title' => 'Saved searches',
    'description' => 'Let users saves searches on this index.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_saved_searches_index_edit', 5),
    'access arguments' => array('administer search_api_saved_searches'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'file' => 'search_api_saved_searches.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission();
 */
function search_api_saved_searches_permission() {
  $perms['administer search_api_saved_searches'] = array(
    'title' => t('Administer saved searches'),
    'description' => t('Enable and configure saved searches for search indexes.'),
  );
  $perms['use search_api_saved_searches'] = array(
    'title' => t('Use saved searches'),
    'description' => t('Save searches and receive e-mail notifications.'),
  );
  return $perms;
}

/**
 * Implements hook_entity_info().
 */
function search_api_saved_searches_entity_info() {
  $info['search_api_saved_searches_settings'] = array(
    'label' => t('Saved search settings'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'SearchApiSavedSearchesSettings',
    'base table' => 'search_api_saved_searches_settings',
    'uri callback' => 'search_api_saved_searches_settings_url',
    'module' => 'search_api_saved_searches',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'delta',
    ),
  );
  $info['search_api_saved_search'] = array(
    'label' => t('Saved search'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'SearchApiSavedSearch',
    'base table' => 'search_api_saved_search',
    'module' => 'search_api_saved_searches',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
  );

  return $info;
}

/**
 * URL callback for settings entities.
 */
function search_api_saved_searches_settings_url(SearchApiSavedSearchesSettings $settings) {
  return array('path' => 'admin/config/search/search_api/index/' . $settings->index_id . '/saved_searches');
}

// @todo Implement hook_user_*() to automatically assign users all saved
//   searches with their mail address after registration (and free it again if
//   the user is deleted).

/**
 * Implements hook_search_api_index_update().
 *
 * If the index got disabled, do the same with its search settings.
 */
function search_api_saved_searches_search_api_index_update(SearchApiIndex $index) {
  if (!$index->enabled && $index->original->enabled) {
    foreach (search_api_saved_searches_settings_load_multiple(FALSE, array('index_id' => $index->machine_name)) as $settings) {
      if ($settings->enabled) {
        $settings->enabled = FALSE;
        $settings->save();
      }
    }
  }
}

/**
 * Implements hook_search_api_index_delete().
 *
 * Deletes the settings associated with a search index.
 */
function search_api_saved_searches_search_api_index_delete(SearchApiIndex $index) {
  foreach (search_api_saved_searches_settings_load_multiple(FALSE, array('index_id' => $index->machine_name)) as $settings) {
    $settings->delete();
  }
}

/**
 * Implements hook_search_api_saved_searches_settings_insert().
 *
 * Clear block caches when new enabled saved search settings are saved.
 */
function search_api_saved_searches_search_api_saved_searches_settings_insert(SearchApiSavedSearchesSettings $settings) {
  if ($settings->enabled) {
    block_flush_caches();
    cache_clear_all('*', 'cache_block', TRUE);
  }
}

/**
 * Implements hook_search_api_saved_searches_settings_update().
 *
 * Clear block caches when saved search settings are enabled or disabled.
 */
function search_api_saved_searches_search_api_saved_searches_settings_update(SearchApiSavedSearchesSettings $settings) {
  if ($settings->enabled != $settings->original->enabled) {
    block_flush_caches();
    cache_clear_all('*', 'cache_block', TRUE);
  }
}

/**
 * Implements hook_search_api_saved_searches_settings_delete().
 *
 * Clear block caches when enabled saved search settings are deleted.
 */
function search_api_saved_searches_search_api_saved_searches_settings_delete(SearchApiSavedSearchesSettings $settings) {
  foreach (search_api_saved_search_load_multiple(FALSE, array('settings_id' => $settings->delta)) as $search) {
    $search->delete();
  }
  if ($settings->enabled) {
    block_flush_caches();
    cache_clear_all('*', 'cache_block', TRUE);
  }
}

/**
 * Loads a single settings object.
 *
 * @param $id
 *   The settings' identifier or delta.
 * @param $reset
 *   If TRUE, will reset the internal entity cache.
 *
 * @return SearchApiSavedSearchesSettings
 *   The requested entity, or FALSE if no settings for that ID exist.
 */
function search_api_saved_searches_settings_load($id, $reset = FALSE) {
  $ret = entity_load('search_api_saved_searches_settings', array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Loads multiple settings objects.
 *
 * @param $ids
 *   The settings' identifiers or deltas; or FALSE to load all settings objects.
 * @param array $conditions
 *   Associative array of field => value conditions that returned objects must
 *   satisfy.
 * @param $reset
 *   If TRUE, will reset the internal entity cache.
 *
 * @return array
 *   An array of SearchApiSavedSearchesSettings objects matching the conditions.
 */
function search_api_saved_searches_settings_load_multiple($ids = FALSE, array $conditions = array(), $reset = FALSE) {
  return entity_load('search_api_saved_searches_settings', $ids, $conditions, $reset);
}

/**
 * Loads a single saved search object.
 *
 * @param $id
 *   The saved search's ID.
 * @param $reset
 *   If TRUE, will reset the internal entity cache.
 *
 * @return SearchApiSavedSearch
 *   The requested entity, or FALSE if no settings for that ID exist.
 */
function search_api_saved_search_load($id, $reset = FALSE) {
  $ret = entity_load('search_api_saved_search', array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Loads multiple saved search objects.
 *
 * @param $ids
 *   The saved search's IDs; or FALSE to load all saved searches.
 * @param array $conditions
 *   Associative array of field => value conditions that returned objects must
 *   satisfy.
 * @param $reset
 *   If TRUE, will reset the internal entity cache.
 *
 * @return array
 *   An array of SearchApiSavedSearch objects matching the conditions.
 */
function search_api_saved_search_load_multiple($ids = FALSE, array $conditions = array(), $reset = FALSE) {
  return entity_load('search_api_saved_search', $ids, $conditions, $reset);
}

/**
 * Determine whether the current user can create a saved search for specific settings.
 *
 * @param SearchApiSavedSearchesSettings $settings
 *   The settings to check for.
 *
 * @return boolean
 *   TRUE iff the current user is allowed to create a new saved search.
 */
function search_api_saved_search_create_access(SearchApiSavedSearchesSettings $settings) {
  if (!$settings->enabled) {
    return FALSE;
  }

  if (user_access('administer search_api_saved_searches')) {
    return TRUE;
  }
  if (!user_access('use search_api_saved_searches')) {
    return FALSE;
  }

  // @todo Check settings-specific access rules, when there are any.

  return TRUE;
}

/**
 * Determine access to the edit interface for saved searches of a given user.
 *
 * This is both used to determine whether the current user can edit a specific
 * saved search, or whether she can display the overview of the user's saved
 * searches.
 * For anonymous users' searches an access key is generated that allows
 * accessing and editing the searches.
 *
 * @param $account
 *   The user whose saved search(es) would be edited.
 * @param SearchApiSavedSearch $search
 *   (optional) The saved search involved, if there is just a single one.
 * @param string $key
 *   (optional) The saved search involved, if there is just a single one.
 *
 * @return boolean
 *   TRUE iff the current user is allowed to edit the saved search(es).
 */
function search_api_saved_search_edit_access($account, SearchApiSavedSearch $search = NULL, $key = NULL) {
  global $user;

  if (user_access('administer search_api_saved_searches')) {
    return TRUE;
  }
  // Barring admins, the only way to edit anonymous users' saved searches is by
  // providing the access key. There is no overview of all saved searches.
  if ($account->uid == 0) {
    if (empty($search) || empty($key)) {
      return FALSE;
    }
    return isset($search->options['key']) && $search->options['key'] == $key;
  }
  if ($account->uid != $user->uid || !user_access('use search_api_saved_searches')) {
    return FALSE;
  }
  if (isset($search) && $search->uid != $account->uid) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function search_api_saved_searches_block_info() {
  $blocks = array();
  foreach (search_api_saved_searches_settings_load_multiple(FALSE, array('enabled' => TRUE)) as $settings) {
    try {
      $blocks[$settings->delta] = array(
        'info' => t('!index: Save search', array('!index' => $settings->index()->name)),
        // @todo Is this cache setting correct?
        'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
      );
    }
    catch (SearchApiException $e) {}
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function search_api_saved_searches_block_configure($delta = '') {
  $settings = search_api_saved_searches_settings_load($delta);
  $form['settings_link'] = array(
    '#markup' => l(t('To saved search settings'), 'admin/config/search/search_api/index/' . $settings->index_id . '/saved_searches'),
  );
  return $form;
}

/**
 * Implements hook_block_view().
 */
function search_api_saved_searches_block_view($delta = '') {
  $searches = search_api_current_search();
  if (!$searches) {
    return;
  }
  if (!user_access('use search_api_saved_searches')) {
    return;
  }
  $settings = search_api_saved_searches_settings_load($delta);
  if (!$settings || !search_api_saved_search_create_access($settings)) {
    return;
  }
  $index_id = $settings->index_id;
  $options = $settings->options;
  $ids_list = drupal_map_assoc($options['ids_list']);
  $search_ids = variable_get('search_api_saved_searches_search_ids', array());
  foreach ($searches as $id => $data) {
    if ($data[0]->getIndex()->machine_name == $index_id){
      if (!isset($search_ids[$index_id][$id])) {
        $search_ids[$index_id][$id] = $id;
        $search_ids_updated = TRUE;
      }
      if (isset($ids_list[$id]) != $options['default_true']) {
        if (isset($query)) {
          watchdog('search_api_saved_searches', 'Two matching searches on index %index for saved search block.',
              array('%index' => $settings->index()->name), WATCHDOG_WARNING,
              l(t('view page'), $_GET['q'], array('query' => drupal_get_query_parameters())));
        }
        else {
          list($query, $results) = $data;
        }
      }
    }
  }
  if (isset($search_ids_updated)) {
    variable_set('search_api_saved_searches_search_ids', $search_ids);
  }
  if (empty($query)) {
    return;
  }

  return array(
    'subject' => t('Save search'),
    'content' => drupal_get_form('search_api_saved_searches_save_form', $settings, $query),
  );
}

/**
 * Form builder for creating a new saved search.
 *
 * @param SearchApiSavedSearchesSettings $settings
 *   The saved search settings with which to create a new saved search.
 * @param SearchApiQueryInterface $query
 *   (optional) If creating a saved search for an already executed query, the
 *   query.
 *
 * @see search_api_saved_searches_save_form_edit_validate()
 * @see search_api_saved_searches_save_form_edit_submit()
 * @ingroup forms
 */
function search_api_saved_searches_save_form(array $form, array &$form_state, SearchApiSavedSearchesSettings $settings, SearchApiQueryInterface $query = NULL) {
  global $user;

  if (!isset($form_state['query']) && isset($query)) {
    $form_state['query'] = array(
      'index_id' => $query->getIndex()->machine_name,
      'keys' => $query->getKeys(),
      'fields' => $query->getFields(),
      'filters' => $query->getFilter()->getFilters(),
      'options' => $query->getOptions(),
    );
    $form_state['query']['options']['search id'] = $query->getIndex()->machine_name . ':' . 'saved-search';
  }

  // @todo if (empty($form_state['query'])) -> provide advanced creation form.

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#maxlength' => 100,
    '#size' => 16,
    '#default_value' => $user->mail,
    '#required' => TRUE,
  );

  if ($settings->options['user_select_interval'] && count($settings->options['interval_options']) > 1) {
    $form['interval'] = array(
      '#type' => 'select',
      '#title' => t('Notification interval'),
      '#options' => $settings->options['interval_options'],
      '#required' => TRUE,
    );
  }
  else {
    $form['interval'] = array(
      '#type' => 'value',
      '#value' => $settings->options['user_select_interval'] ? reset($settings->options['interval_options']) : $settings->options['set_interval'],
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save search'),
  );

  return $form;
}

/**
 * Form validation handler for search_api_saved_searches_save_form().
 *
 * @see search_api_saved_searches_save_form()
 * @see search_api_saved_searches_save_form_edit_submit()
 */
function search_api_saved_searches_save_form_edit_validate(array $form, array &$form_state) {
  if ($msg = user_validate_mail($form_state['values']['mail'])) {
    form_error($form['mail'], $msg);
  }
}

/**
 * Form validation handler for search_api_saved_searches_save_form().
 *
 * @see search_api_saved_searches_save_form()
 * @see search_api_saved_searches_save_form_edit_validate()
 */
function search_api_saved_searches_save_form_edit_submit(array $form, array &$form_state) {
  // @todo Implement.
}
