<?php

/**
 * @file Offers the ability to save searches and be notified of new results.
 */

/**
 * Implements hook_menu().
 */
function search_api_saved_searches_menu() {
  $items['admin/config/search/search_api/index/%search_api_index/saved_searches'] = array(
    'title' => 'Saved searches',
    'description' => 'Let users saves searches on this index.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_saved_searches_index_edit', 5),
    'access arguments' => array('administer search_api_saved_searches'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'file' => 'search_api_saved_searches.admin.inc',
  );
  $items['admin/config/search/search_api/index/%search_api_index/saved_searches/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission();
 */
function search_api_saved_searches_permission() {
  $perms['administer search_api_saved_searches'] = array(
    'title' => t('Administer saved searches'),
    'description' => t('Enable and configure saved searches for search indexes.'),
  );
  $perms['use search_api_saved_searches'] = array(
    'title' => t('Use saved searches'),
    'description' => t('Save searches and receive e-mail notifications.'),
  );
  return $perms;
}

/**
 * Implements hook_entity_info().
 */
function search_api_saved_searches_entity_info() {
  $info['search_api_saved_searches_settings'] = array(
    'label' => t('Saved search settings'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'SearchApiSavedSearchesSettings',
    'base table' => 'search_api_saved_searches_settings',
    'uri callback' => 'search_api_saved_searches_settings_url',
    'module' => 'search_api_saved_searches',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'delta',
    ),
  );
  $info['search_api_saved_search'] = array(
    'label' => t('Saved search'),
    'base table' => 'search_api_saved_search',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'index_id',
      'label' => 'name',
    ),
    'bundle keys' => array(
      'bundle' => 'machine_name',
    ),
    'bundles' => array(),
  );

  $query = db_select('search_api_saved_searches_settings', 's')
    ->fields('s', array('index_id'));
  $query = db_select('search_api_index', 'i')
    ->fields('i', array('machine_name', 'name'))
    ->condition('machine_name', $query, 'IN');
  foreach ($query->execute()->fetchAllKeyed() as $id => $name) {
    $info['search_api_saved_search']['bundles'][$id] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/config/search/search_api/index/%search_api_index/saved_searches',
        'bundle argument' => 5,
        'real path' => 'admin/config/search/search_api/index/' . $id . '/saved_searches',
        'access arguments' => array('administer search_api_saved_searches'),
      ),
    );
  }

  return $info;
}

/**
 * Implements hook_search_api_index_delete().
 *
 * Deletes the settings associated with a search index.
 */
function search_api_saved_searches_search_api_index_delete(SearchApiIndex $index) {
  foreach (search_api_saved_searches_settings_load_multiple(FALSE, array('index_id' => $index->machine_name)) as $settings) {
    $settings->delete();
  }
}

/**
 * Loads a single settings object.
 *
 * @param $id
 *   The settings' identifier or delta.
 * @param $reset
 *   If TRUE, will reset the internal entity cache.
 *
 * @return SearchApiSavedSearchesSettings
 *   The requested entity, or FALSE if no settings for that ID exist.
 */
function search_api_saved_searches_settings_load($id, $reset = FALSE) {
  $ret = entity_load('search_api_saved_searches_settings', array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Loads multiple settings objects.
 *
 * @param $ids
 *   The settings' identifiers or deltas; or FALSE to load all settings objects.
 * @param array $conditions
 *   Associative array of field => value conditions that returned objects must
 *   satisfy.
 * @param $reset
 *   If TRUE, will reset the internal entity cache.
 *
 * @return array
 *   An array of SearchApiSavedSearchesSettings objects matching the conditions.
 */
function search_api_saved_searches_settings_load_multiple($ids = FALSE, array $conditions = array(), $reset = FALSE) {
  return entity_load('search_api_saved_searches_settings', $ids, $conditions, $reset);
}

/**
 * URL callback for settings entities.
 */
function search_api_saved_searches_settings_url(SearchApiSavedSearchesSettings $settings) {
  return array('path' => 'admin/config/search/search_api/index/' . $settings->index_id . '/saved_searches');
}

/**
 * Add the interval field to a saved search bundle.
 *
 * @param $id
 *   The machine name of the index for which to add the field.
 *
 * @return
 *   Interval field instance.
 */
function search_api_saved_searches_add_interval_field($id) {
  $field = field_info_field('search_api_saved_search_interval');
  $instance = field_info_instance('search_api_saved_search', 'search_api_saved_search_interval', $id);
  if (empty($field)) {
    $field = array(
      'field_name' => 'search_api_saved_search_interval',
      'type' => 'list_integer',
      'entity_types' => array('search_api_saved_search'),
      'translatable' => TRUE,
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'search_api_saved_search_interval',
      'entity_type' => 'search_api_saved_search',
      'bundle' => $id,
      'label' => t('Interval'),
      'widget_type' => 'options_select',
      'settings' => array('allowed_values' => array(
        3600 => t('Hourly'),
        3600 * 24 => t('Daily'),
        3600 * 24 * 7 => t('Weekly'),
      )),
      'default_value' => 3600 * 24,
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}
